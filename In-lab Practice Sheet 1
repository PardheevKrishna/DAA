CSE 2012- Design and Analysis of Algorithms  

In-lab Practice Sheet 1 


Name: Pardheev Krishna Tammineni 

Reg No: 21BCE1406 

__________________________________________________ 

1. Inputs required from the theory: 

 

(a) Pseudocode of Insertion sort 

 

1 for i = 1 to n-1  

2     min = i  

3         for j = i+1 to n  

4             if A[j] < A[min]  

5                 min = j  

6                 swap A[i] with A[min] 

 

(b) T(n) of the insertion-sort 

 

Cost Of Line    No Of Times It Is Run 

C1              n 

C2              n-1 

C3              n-1 

C4              Σ j = 1 to n-1 (tj) 

C5              Σ j = 1 to n-1 (tj - 1) 

C6              Σ j = 1 to n-1 (tj - 1) 

C7              n-1 

 (T(n))=C1 * n + ( C2 + C3 ) * ( n - 1 ) + C4 * Σ n - 1j = 1( t j ) + ( C5 + C6 ) * Σ n - 1j = 1( t j ) + C8 * ( n - 1) 


(c) Best-case, worst-case and avaerage-case time-complexity of the algorithm 


Best Case     O(n) 

Average Case  O(n2) 

Worst Case    O(n2) 

 

2. Design related problems 

(a) Translate the Insertion-sort algorithm discussed in the class into a program which takes n numbers (real or integers). Inputs for the program is n and the n numbers. 

#include <math.h>
#include <stdio.h>

void insertionSort(int arr[], int n)
{
	int i, key, j;
	for (i = 1; i < n; i++) {
		key = arr[i];
		j = i - 1;

		while (j >= 0 && arr[j] > key) {
			arr[j + 1] = arr[j];
			j = j - 1;
		}
		arr[j + 1] = key;
	}
}

void printArray(int arr[], int n)
{
	int i;
	for (i = 0; i < n; i++)
		printf("%d ", arr[i]);
	printf("\n");
}

int main()
{
	int arr[] = { 12, 11, 13, 5, 6 };
	int n = sizeof(arr) / sizeof(arr[0]);

	insertionSort(arr, n);
	printArray(arr, n);

	return 0;
}
