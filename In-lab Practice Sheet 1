CSE 2012- Design and Analysis of Algorithms  

In-lab Practice Sheet 1 


Name: Pardheev Krishna Tammineni 

Reg No: 21BCE1406 

__________________________________________________ 

1. Inputs required from the theory: 

 

(a) Pseudocode of Insertion sort 

 

1 for i = 1 to n-1  

2     min = i  

3         for j = i+1 to n  

4             if A[j] < A[min]  

5                 min = j  

6                 swap A[i] with A[min] 

 

(b) T(n) of the insertion-sort 

 

Cost Of Line    No Of Times It Is Run 

C1              n 

C2              n-1 

C3              n-1 

C4              Σ j = 1 to n-1 (tj) 

C5              Σ j = 1 to n-1 (tj - 1) 

C6              Σ j = 1 to n-1 (tj - 1) 

C7              n-1 

 (T(n))=C1 * n + ( C2 + C3 ) * ( n - 1 ) + C4 * Σ n - 1j = 1( t j ) + ( C5 + C6 ) * Σ n - 1j = 1( t j ) + C8 * ( n - 1) 


(c) Best-case, worst-case and avaerage-case time-complexity of the algorithm 


Best Case     O(n) 

Average Case  O(n2) 

Worst Case    O(n2) 

 

2. Design related problems 

(a) Translate the Insertion-sort algorithm discussed in the class into a program which takes n numbers (real or integers). Inputs for the program is n and the n numbers. 

#include <math.h>
#include <stdio.h>

void insertionSort(int arr[], int n)
{
	int i, key, j;
	for (i = 1; i < n; i++) {
		key = arr[i];
		j = i - 1;

		while (j >= 0 && arr[j] > key) {
			arr[j + 1] = arr[j];
			j = j - 1;
		}
		arr[j + 1] = key;
	}
}

void printArray(int arr[], int n)
{
	int i;
	for (i = 0; i < n; i++)
		printf("%d ", arr[i]);
	printf("\n");
}

int main()
{
	int arr[] = { 12, 11, 13, 5, 6 };
	int n = sizeof(arr) / sizeof(arr[0]);

	insertionSort(arr, n);
	printArray(arr, n);

	return 0;
}

(b) Given a sequence of n numbers (real or integers) and a number k (k is one among the n numbers ), write an algorithm and the
corresponding code to compute the position of k if the given n
numbers are arranged in an increasing order, using insertionsort. If the 2, −1, 3, 0, 7 and 3 are the input , your program
should output 4 since 3 will be in the fourth position (starting
from 1), in the sorted (increasing ) order. You are expected
to code the problem two different ways, say, c1 , c2 using
two different approaches. Decide whether c1 is efficient or c2
is efficient based on the running time T(n) of the resepctive
codes.

#include <stdio.h>

void printArray(int array[], int size) {
  for (int i = 0; i < size; i++) {
    printf("%d ", array[i]);
  }
  printf("\n");
}

void insertionSort(int array[], int size) {
  for (int step = 1; step < size; step++) {
    int key = array[step];
    int j = step - 1;
    while (key < array[j] && j >= 0) {
      array[j + 1] = array[j];
      j--;
    }
    array[j + 1] = key;
  }
}

void search(int arr[],int n,int key){
    for (int i=0;i<n;i++)
        if (key==arr[i])
            printf("Position of %d is %d using algo 1\n",key,i+1);
}

int binarySearch(int arr[], int l, int r, int x)
{
	if (r >= l) {
		int mid = l + (r - l) / 2;
		if (arr[mid] == x)
			return mid+1;
		if (arr[mid] > x)
			return binarySearch(arr, l, mid - 1, x);
		return binarySearch(arr, mid + 1, r, x);
	}
	return -1;
}

int main() {
  int n;
  scanf(" %d",&n);
  int arr[n];
  for (int i=0;i<n;i++)
    scanf(" %d",&arr[i]);
  int key;
  scanf(" %d",&key);
  printf("Soted Array: ");
  insertionSort(arr,n);
  printArray(arr,n);
  search(arr,n,key);
  printf("Position of %d is %d using algo 2\n",key,binarySearch(arr,0,n-1,key));
}

(d) Given a sequence of n numbers (real or integers), write an
algorithm and the corresponding code to arrange the given
n numbers are arranged in such a way that all the negative
numbers (if any) are arranged in a descending order and all
the positive numbers are arranged in an increasing order with
zero (if it is in the input) appearing between the smallest negative number and the smallest positive number. If 7, 3, 2, 4 the
output should be 2, 3, 4, 7. If −7, −3, 2, 4 the output should be
−3, −7, 2, 4 should be the output. If 7, 3, −1, 0, 2, 4 the output
should be −1, 0, 3, 4, 7.

#include <stdio.h>

void swap(int *a,int *b){
    int temp=*a;
    *a=*b;
    *b=temp;
}

void printArray(int array[], int size) {
  for (int i = 0; i < size; i++) {
    printf("%d ", array[i]);
  }
  printf("\n");
}

int main() {
  int n;
  scanf(" %d",&n);
  int arr[n];
  for (int i=0;i<n;i++)
    scanf(" %d",&arr[i]);
  int small_pos=0,small_neg=0;
  for (int i=0;i<n;i++)
    if (arr[i]>=0 && arr[i]<arr[small_pos])
        small_pos=i;
    else if (arr[i]<0 && arr[i]<arr[small_neg])
        small_neg=i;
  swap(&arr[small_neg],&arr[n-1]);
  swap(&arr[small_pos],&arr[0]);
  printArray(arr,n);
  for (int i=1;i<n-1;i++)
    for (int j=i+1;j<n-1;j++)
        if (arr[i]<0 && arr[j]<0 && arr[i]<arr[j])
            swap(&arr[i],&arr[j]);
        else if (arr[i]>=0 && arr[j]>=0 && arr[i]>arr[j])
            swap(&arr[i],&arr[j]);
  
  printArray(arr,n);
}
